package com.acquire.shopick.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.acquire.shopick.dao.Store;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE".
*/
public class StoreDao extends AbstractDao<Store, Long> {

    public static final String TABLENAME = "STORE";

    /**
     * Properties of entity Store.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Lat = new Property(2, Float.class, "lat", false, "LAT");
        public final static Property Lon = new Property(3, Float.class, "lon", false, "LON");
        public final static Property Brand_id = new Property(4, Long.class, "brand_id", false, "BRAND_ID");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property Brand_logo = new Property(8, String.class, "brand_logo", false, "BRAND_LOGO");
        public final static Property Type = new Property(9, Integer.class, "type", false, "TYPE");
        public final static Property Category = new Property(10, String.class, "category", false, "CATEGORY");
        public final static Property Category_id = new Property(11, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Location_id = new Property(12, Long.class, "location_id", false, "LOCATION_ID");
        public final static Property Distance = new Property(13, String.class, "distance", false, "DISTANCE");
    };


    public StoreDao(DaoConfig config) {
        super(config);
    }
    
    public StoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LAT\" REAL," + // 2: lat
                "\"LON\" REAL," + // 3: lon
                "\"BRAND_ID\" INTEGER," + // 4: brand_id
                "\"PHONE\" TEXT," + // 5: phone
                "\"EMAIL\" TEXT," + // 6: email
                "\"ADDRESS\" TEXT," + // 7: address
                "\"BRAND_LOGO\" TEXT," + // 8: brand_logo
                "\"TYPE\" INTEGER," + // 9: type
                "\"CATEGORY\" TEXT," + // 10: category
                "\"CATEGORY_ID\" INTEGER," + // 11: category_id
                "\"LOCATION_ID\" INTEGER," + // 12: location_id
                "\"DISTANCE\" TEXT);"); // 13: distance
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Store entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Float lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(3, lat);
        }
 
        Float lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(4, lon);
        }
 
        Long brand_id = entity.getBrand_id();
        if (brand_id != null) {
            stmt.bindLong(5, brand_id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String brand_logo = entity.getBrand_logo();
        if (brand_logo != null) {
            stmt.bindString(9, brand_logo);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(10, type);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(11, category);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(12, category_id);
        }
 
        Long location_id = entity.getLocation_id();
        if (location_id != null) {
            stmt.bindLong(13, location_id);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(14, distance);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Store readEntity(Cursor cursor, int offset) {
        Store entity = new Store( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // lat
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // lon
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // brand_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // brand_logo
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // category
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // category_id
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // location_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // distance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Store entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLat(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setLon(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setBrand_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBrand_logo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCategory(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCategory_id(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setLocation_id(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setDistance(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Store entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Store entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
