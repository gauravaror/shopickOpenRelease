package com.acquire.shopick.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.acquire.shopick.dao.Brands;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRANDS".
*/
public class BrandsDao extends AbstractDao<Brands, Long> {

    public static final String TABLENAME = "BRANDS";

    /**
     * Properties of entity Brands.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Logo_url = new Property(2, String.class, "logo_url", false, "LOGO_URL");
        public final static Property Tagline = new Property(3, String.class, "tagline", false, "TAGLINE");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property Category_id = new Property(5, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Liked = new Property(6, Boolean.class, "liked", false, "LIKED");
        public final static Property Dirty = new Property(7, Boolean.class, "dirty", false, "DIRTY");
    };


    public BrandsDao(DaoConfig config) {
        super(config);
    }
    
    public BrandsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRANDS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LOGO_URL\" TEXT," + // 2: logo_url
                "\"TAGLINE\" TEXT," + // 3: tagline
                "\"CATEGORY\" TEXT," + // 4: category
                "\"CATEGORY_ID\" INTEGER," + // 5: category_id
                "\"LIKED\" INTEGER," + // 6: liked
                "\"DIRTY\" INTEGER);"); // 7: dirty
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRANDS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Brands entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String logo_url = entity.getLogo_url();
        if (logo_url != null) {
            stmt.bindString(3, logo_url);
        }
 
        String tagline = entity.getTagline();
        if (tagline != null) {
            stmt.bindString(4, tagline);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(6, category_id);
        }
 
        Boolean liked = entity.getLiked();
        if (liked != null) {
            stmt.bindLong(7, liked ? 1L: 0L);
        }
 
        Boolean dirty = entity.getDirty();
        if (dirty != null) {
            stmt.bindLong(8, dirty ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Brands readEntity(Cursor cursor, int offset) {
        Brands entity = new Brands( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // logo_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tagline
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // category
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // category_id
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // liked
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // dirty
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Brands entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogo_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTagline(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategory_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLiked(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setDirty(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Brands entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Brands entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
