package com.acquire.shopick.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.acquire.shopick.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Integer> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ProfileImage = new Property(3, String.class, "profileImage", false, "PROFILE_IMAGE");
        public final static Property CoverImage = new Property(4, String.class, "coverImage", false, "COVER_IMAGE");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property InstanceID = new Property(6, String.class, "instanceID", false, "INSTANCE_ID");
        public final static Property Usercode = new Property(7, String.class, "usercode", false, "USERCODE");
        public final static Property Referred = new Property(8, String.class, "referred", false, "REFERRED");
        public final static Property Picks = new Property(9, Long.class, "picks", false, "PICKS");
        public final static Property MonthlyPicks = new Property(10, Long.class, "monthlyPicks", false, "MONTHLY_PICKS");
        public final static Property Authentication_token = new Property(11, String.class, "authentication_token", false, "AUTHENTICATION_TOKEN");
        public final static Property Rank = new Property(12, Long.class, "rank", false, "RANK");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EMAIL\" TEXT," + // 1: email
                "\"NAME\" TEXT," + // 2: name
                "\"PROFILE_IMAGE\" TEXT," + // 3: profileImage
                "\"COVER_IMAGE\" TEXT," + // 4: coverImage
                "\"GENDER\" INTEGER," + // 5: gender
                "\"INSTANCE_ID\" TEXT," + // 6: instanceID
                "\"USERCODE\" TEXT," + // 7: usercode
                "\"REFERRED\" TEXT," + // 8: referred
                "\"PICKS\" INTEGER," + // 9: picks
                "\"MONTHLY_PICKS\" INTEGER," + // 10: monthlyPicks
                "\"AUTHENTICATION_TOKEN\" TEXT," + // 11: authentication_token
                "\"RANK\" INTEGER);"); // 12: rank
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String profileImage = entity.getProfileImage();
        if (profileImage != null) {
            stmt.bindString(4, profileImage);
        }
 
        String coverImage = entity.getCoverImage();
        if (coverImage != null) {
            stmt.bindString(5, coverImage);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        String instanceID = entity.getInstanceID();
        if (instanceID != null) {
            stmt.bindString(7, instanceID);
        }
 
        String usercode = entity.getUsercode();
        if (usercode != null) {
            stmt.bindString(8, usercode);
        }
 
        String referred = entity.getReferred();
        if (referred != null) {
            stmt.bindString(9, referred);
        }
 
        Long picks = entity.getPicks();
        if (picks != null) {
            stmt.bindLong(10, picks);
        }
 
        Long monthlyPicks = entity.getMonthlyPicks();
        if (monthlyPicks != null) {
            stmt.bindLong(11, monthlyPicks);
        }
 
        String authentication_token = entity.getAuthentication_token();
        if (authentication_token != null) {
            stmt.bindString(12, authentication_token);
        }
 
        Long rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(13, rank);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // profileImage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coverImage
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // instanceID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // usercode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // referred
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // picks
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // monthlyPicks
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // authentication_token
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // rank
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProfileImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setInstanceID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUsercode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReferred(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicks(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setMonthlyPicks(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setAuthentication_token(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRank(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
