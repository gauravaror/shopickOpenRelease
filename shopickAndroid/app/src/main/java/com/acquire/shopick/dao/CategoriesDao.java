package com.acquire.shopick.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.acquire.shopick.dao.Categories;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORIES".
*/
public class CategoriesDao extends AbstractDao<Categories, Long> {

    public static final String TABLENAME = "CATEGORIES";

    /**
     * Properties of entity Categories.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Tag = new Property(1, String.class, "tag", false, "TAG");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Color = new Property(4, String.class, "color", false, "COLOR");
        public final static Property Image_url = new Property(5, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Parent_category_id = new Property(6, Long.class, "parent_category_id", false, "PARENT_CATEGORY_ID");
    };


    public CategoriesDao(DaoConfig config) {
        super(config);
    }
    
    public CategoriesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORIES\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TAG\" TEXT," + // 1: tag
                "\"NAME\" TEXT," + // 2: name
                "\"CATEGORY\" TEXT," + // 3: category
                "\"COLOR\" TEXT," + // 4: color
                "\"IMAGE_URL\" TEXT," + // 5: image_url
                "\"PARENT_CATEGORY_ID\" INTEGER);"); // 6: parent_category_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORIES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Categories entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(5, color);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(6, image_url);
        }
 
        Long parent_category_id = entity.getParent_category_id();
        if (parent_category_id != null) {
            stmt.bindLong(7, parent_category_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Categories readEntity(Cursor cursor, int offset) {
        Categories entity = new Categories( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // color
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image_url
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // parent_category_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Categories entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setColor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParent_category_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Categories entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Categories entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
