package com.acquire.shopick.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.acquire.shopick.dao.Post;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POST".
*/
public class PostDao extends AbstractDao<Post, Long> {

    public static final String TABLENAME = "POST";

    /**
     * Properties of entity Post.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LocalId = new Property(0, Long.class, "localId", true, "LOCAL_ID");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property GlobalID = new Property(2, String.class, "globalID", false, "GLOBAL_ID");
        public final static Property LocalFileUri = new Property(3, String.class, "localFileUri", false, "LOCAL_FILE_URI");
        public final static Property Username = new Property(4, String.class, "username", false, "USERNAME");
        public final static Property User_image = new Property(5, String.class, "user_image", false, "USER_IMAGE");
        public final static Property User_id = new Property(6, Long.class, "user_id", false, "USER_ID");
        public final static Property Storename = new Property(7, String.class, "storename", false, "STORENAME");
        public final static Property Store_id = new Property(8, Long.class, "store_id", false, "STORE_ID");
        public final static Property Categoryname = new Property(9, String.class, "categoryname", false, "CATEGORYNAME");
        public final static Property Category_id = new Property(10, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Brandname = new Property(11, String.class, "brandname", false, "BRANDNAME");
        public final static Property Brand_id = new Property(12, Long.class, "brand_id", false, "BRAND_ID");
        public final static Property Brand_logo = new Property(13, String.class, "brand_logo", false, "BRAND_LOGO");
        public final static Property Image_url = new Property(14, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Title = new Property(15, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(16, String.class, "description", false, "DESCRIPTION");
        public final static Property Likes = new Property(17, Long.class, "likes", false, "LIKES");
        public final static Property Post_type = new Property(18, Integer.class, "post_type", false, "POST_TYPE");
        public final static Property Order_in_category = new Property(19, Integer.class, "order_in_category", false, "ORDER_IN_CATEGORY");
        public final static Property Favorited = new Property(20, Boolean.class, "favorited", false, "FAVORITED");
        public final static Property IsLocal = new Property(21, Boolean.class, "isLocal", false, "IS_LOCAL");
        public final static Property Category = new Property(22, String.class, "category", false, "CATEGORY");
        public final static Property Liked = new Property(23, Boolean.class, "liked", false, "LIKED");
        public final static Property Dirty = new Property(24, Boolean.class, "dirty", false, "DIRTY");
        public final static Property Featured_in_globalID = new Property(25, String.class, "featured_in_globalID", false, "FEATURED_IN_GLOBAL_ID");
        public final static Property Featured_in_title = new Property(26, String.class, "featured_in_title", false, "FEATURED_IN_TITLE");
        public final static Property Read = new Property(27, Boolean.class, "read", false, "READ");
        public final static Property Post_collection_id = new Property(28, Long.class, "post_collection_id", false, "POST_COLLECTION_ID");
    };

    private Query<Post> postCollection_PostsQuery;

    public PostDao(DaoConfig config) {
        super(config);
    }
    
    public PostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST\" (" + //
                "\"LOCAL_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
                "\"ID\" INTEGER UNIQUE ," + // 1: id
                "\"GLOBAL_ID\" TEXT UNIQUE ," + // 2: globalID
                "\"LOCAL_FILE_URI\" TEXT," + // 3: localFileUri
                "\"USERNAME\" TEXT," + // 4: username
                "\"USER_IMAGE\" TEXT," + // 5: user_image
                "\"USER_ID\" INTEGER," + // 6: user_id
                "\"STORENAME\" TEXT," + // 7: storename
                "\"STORE_ID\" INTEGER," + // 8: store_id
                "\"CATEGORYNAME\" TEXT," + // 9: categoryname
                "\"CATEGORY_ID\" INTEGER," + // 10: category_id
                "\"BRANDNAME\" TEXT," + // 11: brandname
                "\"BRAND_ID\" INTEGER," + // 12: brand_id
                "\"BRAND_LOGO\" TEXT," + // 13: brand_logo
                "\"IMAGE_URL\" TEXT," + // 14: image_url
                "\"TITLE\" TEXT," + // 15: title
                "\"DESCRIPTION\" TEXT," + // 16: description
                "\"LIKES\" INTEGER," + // 17: likes
                "\"POST_TYPE\" INTEGER," + // 18: post_type
                "\"ORDER_IN_CATEGORY\" INTEGER," + // 19: order_in_category
                "\"FAVORITED\" INTEGER," + // 20: favorited
                "\"IS_LOCAL\" INTEGER," + // 21: isLocal
                "\"CATEGORY\" TEXT," + // 22: category
                "\"LIKED\" INTEGER," + // 23: liked
                "\"DIRTY\" INTEGER," + // 24: dirty
                "\"FEATURED_IN_GLOBAL_ID\" TEXT," + // 25: featured_in_globalID
                "\"FEATURED_IN_TITLE\" TEXT," + // 26: featured_in_title
                "\"READ\" INTEGER," + // 27: read
                "\"POST_COLLECTION_ID\" INTEGER);"); // 28: post_collection_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_POST_GLOBAL_ID ON POST" +
                " (\"GLOBAL_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Post entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String globalID = entity.getGlobalID();
        if (globalID != null) {
            stmt.bindString(3, globalID);
        }
 
        String localFileUri = entity.getLocalFileUri();
        if (localFileUri != null) {
            stmt.bindString(4, localFileUri);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
 
        String user_image = entity.getUser_image();
        if (user_image != null) {
            stmt.bindString(6, user_image);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(7, user_id);
        }
 
        String storename = entity.getStorename();
        if (storename != null) {
            stmt.bindString(8, storename);
        }
 
        Long store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindLong(9, store_id);
        }
 
        String categoryname = entity.getCategoryname();
        if (categoryname != null) {
            stmt.bindString(10, categoryname);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(11, category_id);
        }
 
        String brandname = entity.getBrandname();
        if (brandname != null) {
            stmt.bindString(12, brandname);
        }
 
        Long brand_id = entity.getBrand_id();
        if (brand_id != null) {
            stmt.bindLong(13, brand_id);
        }
 
        String brand_logo = entity.getBrand_logo();
        if (brand_logo != null) {
            stmt.bindString(14, brand_logo);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(15, image_url);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(16, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(17, description);
        }
 
        Long likes = entity.getLikes();
        if (likes != null) {
            stmt.bindLong(18, likes);
        }
 
        Integer post_type = entity.getPost_type();
        if (post_type != null) {
            stmt.bindLong(19, post_type);
        }
 
        Integer order_in_category = entity.getOrder_in_category();
        if (order_in_category != null) {
            stmt.bindLong(20, order_in_category);
        }
 
        Boolean favorited = entity.getFavorited();
        if (favorited != null) {
            stmt.bindLong(21, favorited ? 1L: 0L);
        }
 
        Boolean isLocal = entity.getIsLocal();
        if (isLocal != null) {
            stmt.bindLong(22, isLocal ? 1L: 0L);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(23, category);
        }
 
        Boolean liked = entity.getLiked();
        if (liked != null) {
            stmt.bindLong(24, liked ? 1L: 0L);
        }
 
        Boolean dirty = entity.getDirty();
        if (dirty != null) {
            stmt.bindLong(25, dirty ? 1L: 0L);
        }
 
        String featured_in_globalID = entity.getFeatured_in_globalID();
        if (featured_in_globalID != null) {
            stmt.bindString(26, featured_in_globalID);
        }
 
        String featured_in_title = entity.getFeatured_in_title();
        if (featured_in_title != null) {
            stmt.bindString(27, featured_in_title);
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(28, read ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Post readEntity(Cursor cursor, int offset) {
        Post entity = new Post( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // globalID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localFileUri
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // username
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_image
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // user_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // storename
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // store_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // categoryname
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // category_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // brandname
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // brand_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // brand_logo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // image_url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // title
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // description
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // likes
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // post_type
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // order_in_category
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // favorited
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // isLocal
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // category
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // liked
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0, // dirty
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // featured_in_globalID
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // featured_in_title
            cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0 // read
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Post entity, int offset) {
        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGlobalID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalFileUri(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_image(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setStorename(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStore_id(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCategoryname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCategory_id(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setBrandname(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBrand_id(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setBrand_logo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImage_url(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTitle(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDescription(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLikes(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setPost_type(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setOrder_in_category(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setFavorited(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setIsLocal(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setCategory(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLiked(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setDirty(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
        entity.setFeatured_in_globalID(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFeatured_in_title(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRead(cursor.isNull(offset + 27) ? null : cursor.getShort(offset + 27) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Post entity, long rowId) {
        entity.setLocalId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Post entity) {
        if(entity != null) {
            return entity.getLocalId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "posts" to-many relationship of PostCollection. */
    public List<Post> _queryPostCollection_Posts(Long post_collection_id) {
        synchronized (this) {
            if (postCollection_PostsQuery == null) {
                QueryBuilder<Post> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Post_collection_id.eq(null));
                postCollection_PostsQuery = queryBuilder.build();
            }
        }
        Query<Post> query = postCollection_PostsQuery.forCurrentThread();
        query.setParameter(0, post_collection_id);
        return query.list();
    }

}
